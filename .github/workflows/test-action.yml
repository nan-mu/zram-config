name: Test

# Trigger the workflow on push or pull request
on:
  push:
    paths:
      - 'zram-config'
      - '**.bash'
      - 'tests/**'
      - '.github/workflows/test-action.yml'
  pull_request:
    paths:
      - 'zram-config'
      - '**.bash'
      - 'tests/**'
      - '.github/workflows/test-action.yml'

jobs:
  raspios-test:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    steps:
       - name: Checkout repository
         uses: actions/checkout@v4
       - name: Setup environment
         id: setup
         run: |
           sudo -E bash -c set
           sudo add-apt-repository ppa:canonical-server/server-backports
           sudo apt-get update
           sudo apt-get install --yes gnupg xz-utils expect systemd-container qemu-user-static qemu-utils qemu-system-arm libfdt-dev
           echo "imagexz=$(basename "$(curl "https://downloads.raspberrypi.org/raspios_lite_armhf_latest" -s -L -I  -o /dev/null -w '%{url_effective}')")" >> $GITHUB_OUTPUT
           echo "image=$(echo "$(basename "$(curl "https://downloads.raspberrypi.org/raspios_lite_armhf_latest" -s -L -I  -o /dev/null -w '%{url_effective}')")" | sed -e 's/.xz//')" >> $GITHUB_OUTPUT
       - name: Cache Raspberry Pi OS 32bit image
         uses: actions/cache@v4
         with:
           path: ${{ steps.setup.outputs.image }}
           key: ${{ steps.setup.outputs.image }}
       - name: Build image
         run: sudo -E ./tests/image.bash "setup" "${{ steps.setup.outputs.imagexz }}" "${{ steps.setup.outputs.image }}"
         shell: bash
       - name: Run tests
         run: |
           cp "${{ steps.setup.outputs.image }}" raspios.img
           sudo expect ./tests/run.exp
         shell: bash
       - name: Copy logs
         if: always()
         run: sudo ./tests/image.bash "copy-logs" "raspios.img"
       - name: Upload logs
         if: always()
         uses: actions/upload-artifact@v4
         with:
           name: logs.tar
           path: logs.tar
  alpine-test:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    steps:
       - name: Checkout repository
         uses: actions/checkout@v4
       - name: Setup environment
         id: setup
         run: |
           sudo -E bash -c set
           sudo add-apt-repository ppa:canonical-server/server-backports
           sudo apt-get update
           sudo apt-get install --yes gnupg xz-utils expect systemd-container qemu-user-static qemu-utils qemu-system-arm bridge-utils libfdt-dev
           sudo brctl addbr br0
           sudo brctl addif br0 eth0
           sudo ifup br0
           echo "imagegz=alpine-rpi-3.20.1-armhf.img.gz" >> $GITHUB_OUTPUT
           echo "image=alpine-rpi-3.20.1-armhf.img" >> $GITHUB_OUTPUT
       - name: Cache Alpine 32bit image
         uses: actions/cache@v4
         with:
           path: ${{ steps.setup.outputs.image }}
           key: ${{ steps.setup.outputs.image }}
       - name: Build image
         run: sudo -E ./tests/image.bash "setup" "${{ steps.setup.outputs.imagegz }}" "${{ steps.setup.outputs.image }}"
         shell: bash
       - name: Run tests
         run: |
           cp "${{ steps.setup.outputs.image }}" alpine.img
           sudo expect ./tests/run.exp
         shell: bash
       - name: Copy logs
         if: always()
         run: sudo ./tests/image.bash "copy-logs" "alpine.img"
       - name: Upload logs
         if: always()
         uses: actions/upload-artifact@v4
         with:
           name: logs.tar
           path: logs.tar
